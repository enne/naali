namespace Foundation
{
/**

\page ModuleArchitecture Viewer module architecture

		Below is a short description of current module architecture
		and how to use existing modules and create new ones.
	
		Assumption is that all modules get loaded when program is started, and unloaded when program exits.
        Modules may get initialized and uninitialized any number of times during the program's life time,
        but usually certain core modules are assumed to be always present.
        
        Currently only modules written in C++ are supported. In future it should be possible to
        also write modules using Python.
        
        ModuleManager is the main way to use modules, use Framework::GetModuleManager to get a pointer to it.
        There are generally only a few functions that should be used, rest are for internal use.

\section communication_sec Accessing modules in the system

todo: add here instructions how to use the ModuleManager in C++ to access a module. (using ModuleManager)
How to configure cmake inter-module dependencies.

Accessing modules directly using ModuleManager:
    - Add the module's directory to includes
    - Link against the module library


	\section creating_sec Creating a new C++ module.
	
        To create a new (static) module:
            - Create a class that inherits from Foundation::IModule
            - In the Module's Load()-function, declare all components the new module offers with DECLARE_MODULE_EC macro.
            - In the Module's Initialize()-function, register all services the new module offers.
            - Also unregister all services in the Uninitialize()-function.
            - Declare the static module with ModuleManager::DeclareStaticModule() function. (Only for static modules).
            - Add the type of the module to both Foundation::Module::Type enumeration and
              Foundation::Module::NameFromType function, in ModuleInterface.h.
            - All classes in the module that that are to be accessed outside the module should be declared with xxx_MODULE_API macro. (each DLL to be built has their own macro)

        Additional steps to create a new shared module:
            - Do not use the DeclareStaticModule() function.
            - Copy following to the implementation (cpp file) of the Module-class:
				\verbatim
POCO_BEGIN_MANIFEST(Foundation::ModuleInterface)
    POCO_EXPORT_CLASS(CLASS_NAME)
POCO_END_MANIFEST
                \endverbatim
              where CLASS_NAME is the name of the newly created class. The above needs to be outside of any namespace,
              there should only be one manifest section per library!
              If your your class is in a spesific namespace, add "using namespace YOUR_NAMESPACE" before POCO_BEGIN_MANIFEST.
              Also for the profiler to work correctly, copy the following:
				\verbatim
extern "C" void POCO_LIBRARY_API SetProfiler(Foundation::Framework *framework);
void SetProfiler(Foundation::Framework *framework)
{
    Foundation::ProfilerSection::SetProfiler(&framework->GetProfiler());
}
				\endverbatim
            - Create a module definition file (xml file) that matches the name of the sub-project
              and that contains the names of the module entry classes (modules that are contained in
              a single sub-project, often just one). See \ref module_def_sec.
            - In a post-build step, both the module and the xml file will get copied to bin/modules
              directory (or one of it's subdirectories).
            - Define module dependencies, if needed. See \ref depencency_sec.
            - To enable logging, add macro MODULE_LOGGING_FUNCTIONS to the entry classes' header file.
              This adds static logging functions to the class.
            - For a simple example, see TestModule.h, Exports.cpp and TestService.h. 

\section module_cmake Setting up CMakeLists.txt for your module.
todo.
\section module_pch Setting up a Precompiled Header for your module.
todo.

\section module_locale Making your module localization-aware.
todo.

\section module_python Creating a module using Python.
todo.

	\section module_def_sec Module definition file
		Each module library should be accompanied by a module definition file. Name of
		the file should match the name of the module library file, f.ex. module
		MyModule.dll should have a module definition file MyModule.xml. The file is used
		to identify libraries that contain modules and to provide additional information
		that is needed when they are loaded / initialized.
		
		By convention the xml file should be placed to the module's project directory.
		
		For simple libraries that contain only one module, an empty module definition file
		suffices. For modules that depend on other modules (see \ref depencency_sec) or if
		the library contains more than one module, the definition file needs to be filled
		accordingly.
		
		For each module in the library, add &lt;entry&gt; line for the entry class. Entry class
		is the class that inherits from ModuleInterfaceImpl-class. For example:
		\verbatim
<config>
   <entry>MyEntryClassNameA</entry>
   <entry>MyEntryClassNameB</entry>
</config>
        \endverbatim		            
        
    \section depencency_sec Module dependencies
		Modules may depend on each other. In practical terms, when one module depends on other module(s),
		it means the dependencies gets loaded and initialized before the dependant module. The
		dependant module can use the dependencies when it is being initialized itself, and can
		reasonably assume the dependencies are properly initialized.
		
		\attention If you link against another module in your own module, then you must add
		                   dependency to that module, otherwise your module may get loaded before
		                   the dependency and it will complain about not finding the library
		                   that contains the dependency.
		
		To declare a module dependant on other module, in the module definition file add a
		&lt;dependency&gt; line for each module. 
		
		For example:
              \verbatim
<config>
   <entry>YourEntryClassName</entry>
   <dependency>ModuleName_A</dependency>
   <dependency>ModuleName_B</dependency>
</config>
              \endverbatim
            
*/

}
