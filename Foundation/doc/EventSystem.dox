/**

\page EventSystem Viewer event system

	This page describes how to use the Naali internal event system and
	the event manager. The event system is a way for viewer modules to communicate
	between each other.

	\section acquiring_ES Acquiring the EventManager	

	To use the event system, a reference to the EventManager within the Foundation framework is needed.
	Use Foundation::Framework::GetEventManager() to acquire.

	\section events_ES Events
	
	When sent, an event in the event system is made up of 3 things: event category ID, event ID, 
        and an optional pointer to a event-specific data structure. The category ID and event ID 
	identify the event to the receiver, while the data structure, if necessary, contains data specific
	to the event.

	\subsection categoryregistering_ES Event category ID's, registering

	Each module that is interested in sending events should register an event category, or possibly 
	several, using Foundation::EventManager::RegisterEventCategory(). The event categories are identified with 
	text strings, for example "Renderer" or "Input". When registering a category, the category name 
	is associated with a numeric category ID for quick access and returned to the caller.

	Typically, event categories should be registered during the module's Initialize() function.

	Example of registering an event category:

\code
event_category_ = framework_->GetEventManager()->RegisterEventCategory("Input");	
\endcode

	\subsection categoryquerying_ES Event category ID's, querying

	To be able to identify events sent by other modules, it is necessary to query for 
	other event category ID's. There are many ways to do this, for example these two:

	1) When receiving an event, query the event category name from the category ID using
	   Foundation::EventManager::QueryEventCategoryName() and see if it matches what you were
	   expecting, for example "Input". This is not performance-optimal, but fine for events that
	   are not received very often.

	2) Query and store the event category ID's for all categories you are interested of during 
       your module's Initialize() or PostInitialize() function, using Foundation::EventManager::QueryEventCategory().

	If querying by a category name that does not exist yet, there are two possibilities, according to the
    'create' paremeter of QueryEventCategory(). If 'create' is true, which is the default, the category
    will be registered. If 'create' is false, then the unknown/illegal category ID 0 will be returned.

	Example of querying and storing event category, and checking for unknown (note that 'create' parameter is false here)

\code
assetcategory_id_ = event_manager->QueryEventCategory("Asset", false);
        
if (assetcategory_id_ == IllegalEventCategory )
    LogWarning("Asset event category has not been registered yet!");
\endcode

	\subsection eventid_ES Event ID's
	
	Within an event category, a module can freely decide how to use event ID's. These are just numbers
	that are typically defined in an include file. See for example InputEvents.h

	For debugging purposes, event ID's within an event category should be registered using 
	Foundation::EventManager::RegisterEvent().


	\subsection eventdata_ES Event data structures

	Using an event data structure is optional; if it is not necessary, the pointer 
	to the data structure can be NULL when sending an event.

	But if a data structure is required, it needs to be subclassed from Foundation::EventDataInterface. 
	For clarity and safety, a certain type of data structure should always correspond to a certain event ID of a 
	certain event category. For example the ASSET_READY event of the AssetModule always contains
	a pointer to a Asset::Events::AssetReady structure. Then, when handling the event, one can downcast to the
	expected class to access the event data structure contents.

	The pointer to an event data structure should only assumed to be valid during the handling 
	of an event; the pointer should never be stored (it is typically a temporary object.)

	See InputEvents.h and AssetEvents.h for examples of defining event data structures.


	\section sendingevent_ES Sending an event

	To send an event, you need to know your event category ID, the event ID, and have an event data 
	structure ready if necessary. Then call Foundation::EventManager::SendEvent(). It will return 
	true if some module 'handled' the event, false otherwise.

	An example of preparing an event data structure (in this case, containing an entity ID) and sending the event:
	
\code
Scene::Events::SceneEventData event_data(currentEntityID_);
framework_->GetEventManager()->SendEvent(scene_event_category_, Scene::Events::EVENT_ENTITY_UPDATED, &event_data);
\endcode
	
	\section receivingevent_ES Receiving events

	Modules receive and handle events through their Foundation::ModuleInterface::HandleEvent() function. This function should return
	false if the module wants the event to propagate to other receivers, or true if the module 'handled'
	the event and does not wish for it to propagate further.

        To actually receive events, modules need to be registered as event subscribers by calling 			Foundation::EventManager::RegisterEventSubscriber(). By default, the ModuleInterface base class registers the module as 
	a subscriber with the default priority 100. You can modify the priority by calling the function again with a different priority, 
	or if you do not wish your module to receive events (perhaps for performance reasons) you can use the 
	function Foundation::EventManager::UnregisterEventSubscriber(). Note that for re-registering (changing priority), you need a shared 	pointer to your module, which you can acquire through Foundation::ModuleManager. See PythonScript::PythonScriptModule::PostInitialize() 	for an example.

	Events are passed to subscribers starting from the highest priority and proceeding to lower, until a subscriber returns true from HandleEvent.

	An example event handler from the OgreRenderingModule, which watches for two distinct event categories and passes event handling to its member object:

\code
bool OgreRenderingModule::HandleEvent(
    Core::event_category_id_t category_id,
    Core::event_id_t event_id, 
    Foundation::EventDataInterface* data)
{
    if (!renderer_)
        return false;

    if (category_id == assetcategory_id_)
    {
        return renderer_->HandleAssetEvent(event_id, data);
    }

    if (category_id == resourcecategory_id_)
    {
        return renderer_->HandleResourceEvent(event_id, data);
    }

    return false;
}
\endcode

	\subsection requesttags_ES Request tags

	Various subsystems which implement handling of delayed requests (asset system, texture decoding)
	need a way to uniquely identify requests, so that they can pass back the request identification
	in an event that tells of the request having been fulfilled.

	The EventManager implements a simple way for handling this: it hands out unique 32-bit unsigned 
        integers which can serve as the request identifiers.

	Use Foundation::EventManager::GetNextRequestTag() when a new request identifier is needed.


	\subsection delayedevents_ES Delayed events

	Normally events are responded to immediately. There is also a possibility to send delayed events,
	using Foundation::EventManager::SendDelayedEvent(). An important difference is that now the
	event data must be retained for a longer time, so it should be allocated with new and wrapped
	inside a shared pointer (Foundation::EventDataPtr) that is passed along.

	Delayed events will be processed during the update cycle of the framework, after individual modules
	have been updated. The delay parameter is seconds; if it is 0, then the event will be sent 
	at the end of the current update cycle.

	Use delayed events with judgement; convoluted logic could be rather easily created with them!
	Also note that you will not get to know whether the event was handled by any subscribers.


\section events_avoid Why avoid events?

Since the creation of the core event pipe, Naali has migrated to operate on top of Qt. Several of 
the features offered by a centralized event pipe can be achieved through Qt signals and slots. The 
identified cases where event overriding is needed were all input-related, for which the new Input API 
provides a built-in mechanism for overriding input signals using InputContexts.

There exists a lot of burden for managing event categories and IDs, and needing to produce subclasses
of EventDataInterface to be able to pass parameters with the events. In most cases, in the future
the use of Naali events will be removed and no new events should be added. If possible, use Qt
signal/slot mechanisms to provide custom inter-module communication.  
 
*/
