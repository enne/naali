// Defines different methods for sampling a standard depth-based shadow map.
// Include only right after including CommonCode.cg first.

// Supported #defines:

// #define SHADOW_MAPPING

#ifdef SHADOW_MAPPING
/* These four parameters are packed in the following variable:
uniform float shadowFuzzyWidth;
uniform float fixedDepthBias;
uniform float gradientClamp;
uniform float gradientScaleBias; */
uniform float4 shadowMapParams;

uniform float4x4 lightViewProj0;
#ifdef PSSM_SHADOWS
uniform float4x4 lightViewProj1;
uniform float4x4 lightViewProj2;
#endif

uniform float invShadowmapSize;

ps_3_0 float SampleShadowMap1TapPCF(sampler2D shadowMap, float4 shadowUV)
{
    const float shadowFuzzyWidth = shadowMapParams.x;
    const float fixedDepthBias = shadowMapParams.y;

    // point on shadowmap
	shadowUV = shadowUV / shadowUV.w;

	float centerdepth = tex2Dlod(shadowMap, float4(shadowUV.xy),0.f,0.f).x;

	// use depths from prev, calculate diff
	float lightAmount = 0.2f * saturate((centerdepth - shadowUV.z + fixedDepthBias) * shadowFuzzyWidth);

//	float edges = (shadowUV.z >= 1.f || shadowUV.w <= 0.f || shadowUV.x <= 0.f || shadowUV.x >= 1.f || shadowUV.y <= 0.f || shadowUV.y >= 1.f) ? 1.f : 0.f;

	return lightAmount;//max(edges, lightAmount);
}





/////////////////
//openGL
//
/////////////////

arbfp1 float SampleShadowMap1TapPCF(sampler2D shadowMap, float4 shadowUV)
{
    const float shadowFuzzyWidth = shadowMapParams.x;
    const float fixedDepthBias = shadowMapParams.y;

    // point on shadowmap
	shadowUV = shadowUV / shadowUV.w;

	float centerdepth = tex2D(shadowMap, shadowUV.xy).x;

	// use depths from prev, calculate diff
	float lightAmount = 0.2f * saturate((centerdepth - shadowUV.z + fixedDepthBias) * shadowFuzzyWidth);

//	float edges = (shadowUV.z >= 1.f || shadowUV.w <= 0.f || shadowUV.x <= 0.f || shadowUV.x >= 1.f || shadowUV.y <= 0.f || shadowUV.y >= 1.f) ? 1.f : 0.f;

	return lightAmount;//max(edges, lightAmount);
}
#endif
